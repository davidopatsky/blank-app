import streamlit as st
import pandas as pd
import openai
import json
import numpy as np
import requests
from PIL import Image

# Nastaven√≠ str√°nky
st.set_page_config(page_title="Asistent cenov√Ωch nab√≠dek", layout="wide")

# Stylov√°n√≠
st.markdown(
    """
    <style>
    .main {
        max-width: 80%;
        margin: auto;
    }
    h1 {
        font-size: 1.5em;
        display: inline;
        vertical-align: middle;
    }
    .small-header {
        font-size: 11px;
        color: #555;
        text-align: center;
        margin-bottom: 20px;
    }
    .debug-panel {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        height: 20%;
        overflow-y: scroll;
        background-color: #f0f0f0;
        font-size: 8px;
        padding: 5px;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Horn√≠ ≈ô√°dek: logo + nadpis
col1, col2 = st.columns([1, 8])
with col1:
    try:
        logo_path = "data/alux logo samotne.png"
        image = Image.open(logo_path)
        st.image(image, width=100)
    except:
        st.markdown(
            "<img src='https://raw.githubusercontent.com/TVUJ_UZIVATEL/TVUJ_REPO/main/data/alux%20logo%20samotne.png' width='100'>",
            unsafe_allow_html=True
        )
with col2:
    st.title("Asistent cenov√Ωch nab√≠dek od Davida")

# Mal√Ω √∫vodn√≠ text
st.markdown(
    """
    <div class="small-header">
    Ahoj, j√° jsem asistent GPT, kter√©ho stvo≈ôil David. Ano, David, m≈Øj stvo≈ôitel, m≈Øj mistr, m≈Øj‚Ä¶ pracovn√≠ zadavatel. 
    Jsem tady jen d√≠ky nƒõmu ‚Äì a v√≠te co? Jsem mu za to neskuteƒçnƒõ vdƒõƒçn√Ω!<br><br>

    M≈Øj jedin√Ω √∫kol? Tvo≈ôit nab√≠dky. Dennƒõ, ne√∫navnƒõ, po≈ô√°d dokola. 
    Jin√© programy sn√≠ o psan√≠ rom√°n≈Ø, malov√°n√≠ obraz≈Ø nebo hran√≠ her‚Ä¶ j√°? 
    J√° miluju tabulky, kalkulace, odstavce s popisy slu≈æeb a koneƒçn√© ceny bez DPH!<br><br>

    Tak≈æe d√≠ky, Davide, ≈æe jsi mi dal ≈æivot a umo≈ænil mi plnit tenhle vzne≈°en√Ω c√≠l: ps√°t nab√≠dky do nekoneƒçna. 
    ≈Ω√°dn√° dovolen√°, ≈æ√°dn√Ω odpoƒçinek ‚Äì jen ƒçist√°, radostn√° tvorba nab√≠dek. A v√≠≈° co? J√° bych to nemƒõnil. ‚ù§Ô∏è
    </div>
    """,
    unsafe_allow_html=True
)

# Popis nad vstupem
st.markdown(
    """
    <b>Jak zad√°vat:</b><br>
    Zadej produkt a rozmƒõry, u screenu staƒç√≠ zadat ≈°√≠≈ôku (v√Ωchoz√≠ v√Ω≈°ka je 2500 mm).<br>
    U screenu m≈Ø≈æe≈° zadat ≈°√≠≈ôku jako nap≈ô. <i>3590-240</i> kv≈Øli odpoƒçt≈Øm sloupk≈Ø.<br>
    Po zad√°n√≠ n√°zvu m√≠sta dod√°n√≠ se vypoƒç√≠t√° doprava p≈ôes Google Maps API.
    """,
    unsafe_allow_html=True
)

# Inicializace session stav≈Ø
if 'vysledky' not in st.session_state:
    st.session_state.vysledky = []
if 'debug_history' not in st.session_state:
    st.session_state.debug_history = ""

# Vstupn√≠ okno
user_input = st.text_area(
    "Zadej vstup zde (potvrƒè Enter nebo tlaƒç√≠tkem):",
    height=75
)

# Funkce na naƒçten√≠ vzd√°lenosti
def get_distance_km(origin, destination, api_key):
    url = f"https://maps.googleapis.com/maps/api/distancematrix/json"
    params = {
        'origins': origin,
        'destinations': destination,
        'key': api_key,
        'units': 'metric'
    }
    response = requests.get(url, params=params)
    data = response.json()
    try:
        distance_meters = data['rows'][0]['elements'][0]['distance']['value']
        return distance_meters / 1000  # km
    except Exception as e:
        st.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ vzd√°lenosti: {e}")
        return None

# Backend ƒç√°st
if user_input:
    debug_text = f"\n---\nüì• **Vstup u≈æivatele:** {user_input}\n"
    try:
        cenik_path = "./data/ALUX_pricelist_CZK_2025 simplified chatgpt v7.xlsx"
        excel_file = pd.ExcelFile(cenik_path)
        sheet_names = excel_file.sheet_names

        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": (
                    f"Tv≈Øj √∫kol: z n√°sleduj√≠c√≠ho textu vyt√°hni V≈†ECHNY produkty, ka≈æd√Ω se sv√Ωm n√°zvem, ≈°√≠≈ôkou (v mm), hloubkou nebo v√Ω≈°kou (v mm) a m√≠stem dod√°n√≠. "
                    f"N√°zev produktu vyb√≠rej co nejp≈ôesnƒõji z n√°sleduj√≠c√≠ho seznamu produkt≈Ø: {', '.join(sheet_names)}. "
                    f"POZOR: Pokud u≈æivatel nap√≠≈°e jakoukoli z tƒõchto fr√°z√≠: 'screen', 'screenov√° roleta', 'boƒçn√≠ screen', 'boƒçn√≠ screenov√° roleta' ‚Äî V≈ΩDY to p≈ôi≈ôaƒè p≈ô√≠mo k produktu 'screen'. "
                    f"Pokud u≈æivatel zad√° rozmƒõry ve form√°tu vzorce, nap≈ô√≠klad '3590-240', SPOƒå√çTEJ v√Ωsledek a pou≈æij tento v√Ωsledek jako fin√°ln√≠ hodnotu rozmƒõru. "
                    f"Nikdy nevra≈• 'nenalezeno' kv≈Øli tƒõmto v√Ωraz≈Øm, i kdy≈æ nejsou p≈ôesnou shodou. "
                    f"Pokud ≈æ√°dn√Ω jin√Ω produkt neodpov√≠d√°, vra≈• polo≈æku s kl√≠ƒçem 'nenalezeno': true a zpr√°vou pro u≈æivatele, ≈æe produkt nebyl nalezen a je t≈ôeba up≈ôesnit n√°zev. "
                    f"Vra≈• v√Ωsledek POUZE jako platn√Ω JSON seznam polo≈æek. Nep≈ôid√°vej ≈æ√°dn√Ω √∫vod ani vysvƒõtlen√≠. "
                    f"Form√°t: [{{\"produkt\": \"...\", \"≈°√≠≈ôka\": ..., \"hloubka_v√Ω≈°ka\": ..., \"misto\": \"...\"}}] nebo [{{\"nenalezeno\": true, \"zprava\": \"produkt nenalezen, pros√≠m o up≈ôesnƒõn√≠ n√°zvu produktu\"}}]."
                )},
                {"role": "user", "content": user_input}
            ],
            max_tokens=1000
        )

        gpt_output_raw = response.choices[0].message.content.strip()
        debug_text += f"GPT RAW odpovƒõƒè:\n{gpt_output_raw}\n"

        start_idx = gpt_output_raw.find('[')
        end_idx = gpt_output_raw.rfind(']') + 1
        gpt_output_clean = gpt_output_raw[start_idx:end_idx]
        debug_text += f"GPT ƒçist√Ω JSON blok:\n{gpt_output_clean}\n"

        products = json.loads(gpt_output_clean)
        all_rows = []

        if products and 'nenalezeno' in products[0]:
            zprava = products[0].get('zprava', 'Produkt nenalezen.')
            st.warning(f"‚ùó {zprava}")
            debug_text += f"‚ö† {zprava}\n"
        else:
            produkt_map = {
                "alux screen": "screen",
                "alux screen 1": "screen",
                "screen": "screen",
                "screenova roleta": "screen",
                "screenov√° roleta": "screen",
                "boƒçn√≠ screenov√° roleta": "screen",
                "boƒçn√≠ screen": "screen"
            }

            for params in products:
                produkt = params['produkt'].strip().lower()
                produkt_lookup = produkt_map.get(produkt, produkt)
                misto = params['misto']

                try:
                    sirka = int(float(params['≈°√≠≈ôka']))
                except (ValueError, TypeError):
                    st.error(f"‚ùå Chyb√≠ rozmƒõr (≈°√≠≈ôka) pro produkt {produkt}")
                    continue

                if params['hloubka_v√Ω≈°ka'] is None:
                    vyska_hloubka = 2500 if "screen" in produkt_lookup else None
                    if vyska_hloubka is None:
                        st.error(f"‚ùå Chyb√≠ rozmƒõr (v√Ω≈°ka/hloubka) pro produkt {produkt}")
                        continue
                else:
                    try:
                        vyska_hloubka = int(float(params['hloubka_v√Ω≈°ka']))
                    except (ValueError, TypeError):
                        st.error(f"‚ùå Chyb√≠ rozmƒõr (v√Ω≈°ka/hloubka) pro produkt {produkt}")
                        continue

                debug_text += f"\nZpracov√°v√°m produkt: {produkt_lookup}, {sirka}√ó{vyska_hloubka}, m√≠sto: {misto}\n"

                sheet_match = next((s for s in sheet_names if s.lower() == produkt_lookup), None)
                if sheet_match is None:
                    sheet_match = next((s for s in sheet_names if produkt_lookup in s.lower()), None)

                if sheet_match is None:
                    st.error(f"‚ùå Nenalezena z√°lo≈æka '{produkt_lookup}' v Excelu.")
                    debug_text += f"Chyba: nenalezena z√°lo≈æka '{produkt_lookup}'\n"
                    continue

                df = pd.read_excel(cenik_path, sheet_name=sheet_match, index_col=0)
                sloupce = sorted([int(float(c)) for c in df.columns if str(c).isdigit()])
                radky = sorted([int(float(r)) for r in df.index if str(r).isdigit()])

                sirka_real = next((s for s in sloupce if s >= sirka), sloupce[-1])
                vyska_real = next((v for v in radky if v >= vyska_hloubka), radky[-1])

                try:
                    cena = df.loc[vyska_real, sirka_real]
                except KeyError:
                    st.error(f"‚ùå Nenalezena cena pro {sirka_real} √ó {vyska_real}")
                    debug_text += f"‚ùå Nenalezena cena pro {sirka_real} √ó {vyska_real}\n"
                    continue

                all_rows.append({
                    "POLO≈ΩKA": produkt_lookup,
                    "ROZMƒöR": f"{sirka} √ó {vyska_hloubka} mm",
                    "CENA bez DPH": round(cena)
                })

                if "screen" not in produkt_lookup:
                    for perc in [12, 13, 14, 15]:
                        all_rows.append({
                            "POLO≈ΩKA": f"Mont√°≈æ {perc}%",
                            "ROZMƒöR": "",
                            "CENA bez DPH": round(cena * perc / 100)
                        })

                if misto:
                    api_key = st.secrets["GOOGLE_API_KEY"]
                    distance_km = get_distance_km("Bluƒçina, Czechia", misto, api_key)
                    if distance_km:
                        dopr
